# Generated by Django 5.2.6 on 2025-10-10 12:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=25, null=True, unique=True)),
                ('is_mfa_enabled', models.BooleanField(default=False)),
                ('totp_secret', models.CharField(blank=True, max_length=64, null=True)),
                ('is_mfa_verified', models.BooleanField(default=False)),
                ('preferred_2fa', models.CharField(choices=[('totp', 'TOTP'), ('sms', 'SMS')], default='totp', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ('-created_at',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('prefs', models.JSONField(default=dict)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(blank=True, max_length=100)),
                ('prenom', models.CharField(blank=True, max_length=100)),
                ('sexe', models.CharField(blank=True, choices=[('M', 'Masculin'), ('F', 'Féminin')], max_length=1)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('lieu_naissance', models.CharField(blank=True, max_length=100)),
                ('cin_numero', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('cin_date_delivrance', models.CharField(blank=True, max_length=100)),
                ('situation_matrimoniale', models.CharField(blank=True, choices=[('celibataire', 'Célibataire'), ('marie', 'Marié(e)'), ('veuf', 'Veuf(ve)'), ('divorce', 'Divorcé(e)')], max_length=20)),
                ('nombre_enfants', models.IntegerField(default=0)),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('adresse', models.TextField(blank=True)),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('user', 'Utilisateur'), ('manager', 'Gestionnaire')], default='user', help_text="Rôle de l'utilisateur pour la navigation et les permissions", max_length=20)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profiles/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True, help_text='Actif pour le service (auto/dé)activation')),
                ('last_active_at', models.DateTimeField(blank=True, help_text='Dernier accès connu', null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Personnel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('budget_type', models.CharField(choices=[('general', 'Budget Général'), ('cfu', 'CFU'), ('etrangere', 'Etrangère')], max_length=20)),
                ('groupe_sanguin', models.CharField(blank=True, max_length=5)),
                ('poste_precedent', models.CharField(blank=True, max_length=100)),
                ('specialite', models.CharField(blank=True, max_length=100)),
                ('autres_diplomes', models.TextField(blank=True)),
                ('observation', models.TextField(blank=True)),
                ('ref_affectation', models.CharField(blank=True, max_length=100)),
                ('date_affectation', models.DateField(blank=True, null=True)),
                ('date_entree_admin', models.DateField(blank=True, null=True)),
                ('date_entree_hjra', models.DateField(blank=True, null=True)),
                ('lieu_affectation', models.CharField(blank=True, max_length=100)),
                ('conjoint_nom', models.CharField(blank=True, max_length=100)),
                ('conjoint_date_naiss', models.DateField(blank=True, null=True)),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personnel', to='manage_personnel.profile')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
    ]
